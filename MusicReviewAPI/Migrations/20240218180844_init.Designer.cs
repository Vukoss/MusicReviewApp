// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicReviewAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicReviewAPI.Migrations
{
    [DbContext(typeof(DataAccessContext))]
    [Migration("20240218180844_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.Property<int>("TracksId")
                        .HasColumnType("integer");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d5e4f75c-cbd1-4258-9033-006fd9065a19",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f",
                            RoleId = "d5e4f75c-cbd1-4258-9033-006fd9065a19"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BandId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BandId = 1,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_1"
                        },
                        new
                        {
                            Id = 2,
                            BandId = 1,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_2"
                        },
                        new
                        {
                            Id = 3,
                            BandId = 1,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_3"
                        },
                        new
                        {
                            Id = 4,
                            BandId = 2,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_4"
                        },
                        new
                        {
                            Id = 5,
                            BandId = 2,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_5"
                        },
                        new
                        {
                            Id = 6,
                            BandId = 2,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_6"
                        },
                        new
                        {
                            Id = 7,
                            BandId = 3,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_7"
                        },
                        new
                        {
                            Id = 8,
                            BandId = 3,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_8"
                        },
                        new
                        {
                            Id = 9,
                            BandId = 3,
                            Country = "Poland",
                            Duration = 11.109999999999999,
                            Label = "Kayah",
                            Name = "Album_9"
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.AlbumGenre", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AlbumGenre");

                    b.HasData(
                        new
                        {
                            AlbumId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            AlbumId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            AlbumId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            AlbumId = 4,
                            GenreId = 4
                        },
                        new
                        {
                            AlbumId = 5,
                            GenreId = 5
                        },
                        new
                        {
                            AlbumId = 6,
                            GenreId = 6
                        },
                        new
                        {
                            AlbumId = 7,
                            GenreId = 7
                        },
                        new
                        {
                            AlbumId = 8,
                            GenreId = 8
                        },
                        new
                        {
                            AlbumId = 9,
                            GenreId = 9
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Bands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Poland",
                            Name = "Band_1",
                            StartDate = new DateTime(2024, 2, 18, 18, 8, 44, 516, DateTimeKind.Utc).AddTicks(4890)
                        },
                        new
                        {
                            Id = 2,
                            Country = "Poland",
                            Name = "Band_2",
                            StartDate = new DateTime(2024, 2, 18, 18, 8, 44, 516, DateTimeKind.Utc).AddTicks(4890)
                        },
                        new
                        {
                            Id = 3,
                            Country = "Poland",
                            Name = "Band_2",
                            StartDate = new DateTime(2024, 2, 18, 18, 8, 44, 516, DateTimeKind.Utc).AddTicks(4890)
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.BandGenre", b =>
                {
                    b.Property<int>("BandId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("BandId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BandGenre");

                    b.HasData(
                        new
                        {
                            BandId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            BandId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            BandId = 1,
                            GenreId = 3
                        },
                        new
                        {
                            BandId = 2,
                            GenreId = 4
                        },
                        new
                        {
                            BandId = 2,
                            GenreId = 5
                        },
                        new
                        {
                            BandId = 2,
                            GenreId = 6
                        },
                        new
                        {
                            BandId = 3,
                            GenreId = 7
                        },
                        new
                        {
                            BandId = 3,
                            GenreId = 8
                        },
                        new
                        {
                            BandId = 3,
                            GenreId = 9
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreName = "Rock"
                        },
                        new
                        {
                            Id = 2,
                            GenreName = "Indie"
                        },
                        new
                        {
                            Id = 3,
                            GenreName = "Jazz"
                        },
                        new
                        {
                            Id = 4,
                            GenreName = "Smooth Jazz"
                        },
                        new
                        {
                            Id = 5,
                            GenreName = "Electronic"
                        },
                        new
                        {
                            Id = 6,
                            GenreName = "Pop"
                        },
                        new
                        {
                            Id = 7,
                            GenreName = "Indie Pop"
                        },
                        new
                        {
                            Id = 8,
                            GenreName = "Classic"
                        },
                        new
                        {
                            Id = 9,
                            GenreName = "Metal"
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Musicians");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            LastName = "Travolta",
                            Nickname = "Johnny"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Winston",
                            LastName = "Schmidt",
                            Nickname = "Schmidt"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Winston",
                            LastName = "Bishop",
                            Nickname = "Bishop"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Jessica",
                            LastName = "Day",
                            Nickname = "Day"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Nick",
                            LastName = "Miller",
                            Nickname = "Miller"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Monicka",
                            LastName = "Geller",
                            Nickname = "Geller"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Chandler",
                            LastName = "Bing",
                            Nickname = "Bing"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Jack",
                            LastName = "Geller",
                            Nickname = "Geller"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Will",
                            LastName = "Smith",
                            Nickname = "Smith"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Leonardo",
                            LastName = "DiCaprio",
                            Nickname = "DiCaprio"
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.MusicianBand", b =>
                {
                    b.Property<int>("BandId")
                        .HasColumnType("integer");

                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.HasKey("BandId", "MusicianId");

                    b.HasIndex("MusicianId");

                    b.ToTable("MusicianBand");

                    b.HasData(
                        new
                        {
                            BandId = 1,
                            MusicianId = 1
                        },
                        new
                        {
                            BandId = 1,
                            MusicianId = 2
                        },
                        new
                        {
                            BandId = 1,
                            MusicianId = 3
                        },
                        new
                        {
                            BandId = 1,
                            MusicianId = 4
                        },
                        new
                        {
                            BandId = 2,
                            MusicianId = 5
                        },
                        new
                        {
                            BandId = 2,
                            MusicianId = 6
                        },
                        new
                        {
                            BandId = 2,
                            MusicianId = 7
                        },
                        new
                        {
                            BandId = 2,
                            MusicianId = 8
                        },
                        new
                        {
                            BandId = 3,
                            MusicianId = 9
                        },
                        new
                        {
                            BandId = 3,
                            MusicianId = 10
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.MusicianGenre", b =>
                {
                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("MusicianId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MusicianGenre");

                    b.HasData(
                        new
                        {
                            MusicianId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            MusicianId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            MusicianId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            MusicianId = 4,
                            GenreId = 4
                        },
                        new
                        {
                            MusicianId = 5,
                            GenreId = 5
                        },
                        new
                        {
                            MusicianId = 6,
                            GenreId = 6
                        },
                        new
                        {
                            MusicianId = 7,
                            GenreId = 7
                        },
                        new
                        {
                            MusicianId = 8,
                            GenreId = 8
                        },
                        new
                        {
                            MusicianId = 9,
                            GenreId = 9
                        },
                        new
                        {
                            MusicianId = 10,
                            GenreId = 9
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("BandId")
                        .HasColumnType("integer");

                    b.Property<int?>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TrackId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("BandId");

                    b.HasIndex("MusicianId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 1,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 1,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 2,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 2,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 2,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 3,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 3,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 9,
                            AlbumId = 3,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 10,
                            BandId = 1,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 11,
                            BandId = 1,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 12,
                            BandId = 1,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 13,
                            BandId = 2,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 14,
                            BandId = 2,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 15,
                            BandId = 2,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 16,
                            BandId = 3,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 17,
                            BandId = 3,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 18,
                            BandId = 3,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 19,
                            MusicianId = 1,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 20,
                            MusicianId = 1,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 21,
                            MusicianId = 1,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 22,
                            MusicianId = 2,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 23,
                            MusicianId = 2,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 24,
                            MusicianId = 2,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 25,
                            MusicianId = 3,
                            Rating = 5,
                            Text = "Best",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 26,
                            MusicianId = 3,
                            Rating = 4,
                            Text = "Great",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        },
                        new
                        {
                            Id = 27,
                            MusicianId = 3,
                            Rating = 3,
                            Text = "Good",
                            UserId = "dbf6c373-7249-4c7e-841f-565141fe184f"
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            TrackName = "Track_1_A1"
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 1,
                            TrackName = "Track_2_A1"
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 1,
                            TrackName = "Track_3_A1"
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 2,
                            TrackName = "Track_1_A2"
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 2,
                            TrackName = "Track_2_A2"
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 2,
                            TrackName = "Track_3_A2"
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 3,
                            TrackName = "Track_1_A3"
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 3,
                            TrackName = "Track_2_A3"
                        },
                        new
                        {
                            Id = 9,
                            AlbumId = 3,
                            TrackName = "Track_3_A3"
                        });
                });

            modelBuilder.Entity("MusicReviewAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbf6c373-7249-4c7e-841f-565141fe184f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04ba3b16-48fd-485c-9ae4-9a0a039027cb",
                            Email = "admin@admin.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.PL",
                            NormalizedUserName = "ADMIN@ADMIN.PL",
                            PasswordHash = "AQAAAAIAAYagAAAAEGPJD3it3ADyx9drI0rFf8OMYe/Q8y8PLrT1Nx9OUrpE4/xaWRyUpu/E7QiDQ99T/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7eb0546-c43b-493a-ad54-fe06a397a52a",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.pl"
                        });
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicReviewAPI.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicReviewAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Album", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Band", "Band")
                        .WithMany("Albums")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.AlbumGenre", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicReviewAPI.Models.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.BandGenre", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Band", "Band")
                        .WithMany("BandGenres")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicReviewAPI.Models.Genre", "Genre")
                        .WithMany("BandGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.MusicianBand", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Band", "Band")
                        .WithMany("MusicianBands")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicReviewAPI.Models.Musician", "Musician")
                        .WithMany("MusicianBands")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.MusicianGenre", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Genre", "Genre")
                        .WithMany("MusicianGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicReviewAPI.Models.Musician", "Musician")
                        .WithMany("MusicianGenres")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Review", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Album", "Album")
                        .WithMany("Reviews")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MusicReviewAPI.Models.Band", "Band")
                        .WithMany("Reviews")
                        .HasForeignKey("BandId");

                    b.HasOne("MusicReviewAPI.Models.Musician", "Musician")
                        .WithMany("Reviews")
                        .HasForeignKey("MusicianId");

                    b.HasOne("MusicReviewAPI.Models.Track", "Track")
                        .WithMany("Reviews")
                        .HasForeignKey("TrackId");

                    b.HasOne("MusicReviewAPI.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Band");

                    b.Navigation("Musician");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Track", b =>
                {
                    b.HasOne("MusicReviewAPI.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Album", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("Reviews");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Band", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("BandGenres");

                    b.Navigation("MusicianBands");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Genre", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("BandGenres");

                    b.Navigation("MusicianGenres");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Musician", b =>
                {
                    b.Navigation("MusicianBands");

                    b.Navigation("MusicianGenres");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.Track", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MusicReviewAPI.Models.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
